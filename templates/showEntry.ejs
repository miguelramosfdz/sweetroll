<%
	var permalink = scope.permalink, entry = scope.entry, compactView = scope.compactView
	var properties = entry.properties || {}
	var isUntitled = _.isEmpty(properties.name) || !_.isEmpty(properties['bookmark-of'])
	var syndicationName = function (x) {
		if (_.includes(x, 'twitter.com')) return 'Twitter'
		if (_.includes(x, 'facebook.com')) return 'Facebook'
		if (_.includes(x, 'instagram.com')) return 'Instagram'
		if (_.includes(x, 'app.net')) return 'App.net'
		var matches = x.match(/^https?\:\/\/([^\/?#]+)/)
		return (matches && matches[1]) || x
	}
	var dateFormat = compactView ? 'MMM Do YYYY, HH:mm' : 'dddd, MMMM Do YYYY, HH:mm'
	var iconNames = { replies: 'reply', reposts: 'retweet', likes: 'star', bookmarks: 'bookmark', quotations: 'quote-left' }
	var props = { reposts: 'p-repost', likes: 'p-like', bookmarks: 'p-bookmark', quotations: 'p-quotation' }
	var comments = separateComments(properties.url, properties.comment)
	var reasonIcon = function (name, icon) {
		return '<svg role="img" aria-hidden="true" class="icon icon-ref-reason icon-ref-' + name + '"><use xlink:href="' + window.icons + '#' + icon + '"/></svg>'
	}
%>

<% _.forEach(properties['in-reply-to'], function (reply) { %>
	<%= templates.showRefContext({ entry: reply, long: false, prop: 'u-in-reply-to', reason: reasonIcon('reply', 'reply') + ' in reply to', rel: !compactView ? 'rel="in-reply-to"' : '', showReplies: true, showContexts: !compactView }) %>
<% }) %>

<% _.forEach(properties['like-of'], function (like) { %>
	<%= templates.showRefContext({ entry: like, long: false, prop: 'u-like-of', reason: reasonIcon('like', 'star') + ' liked', rel: !compactView ? 'rel="like-of"' : '', showReplies: false, showContexts: !compactView }) %>
<% }) %>

<% _.forEach(properties['quotation-of'], function (quotation) { %>
	<%= templates.showRefContext({ entry: quotation, long: false, prop: 'u-quotation-of', reason: reasonIcon('quotation', 'quote-left') + ' quoted', rel: !compactView ? 'rel="quotation-of"' : '', showReplies: false, showContexts: !compactView }) %>
<% }) %>

<% _.forEach(properties['bookmark-of'], function (bookmark) { %>
	<div class="ref-context u-bookmark-of h-cite">
		<header class="ref-context-reason">
			<%= reasonIcon('bookmark', 'bookmark') %>
			bookmarked
			<% if (_.isString(bookmark)) { %>
				<a class="p-name u-url" href="${ onlyHttpUrl(bookmark) }">
					<%- properties.name ? _.head(properties.name) : bookmark %>
				</a>
			<% } else if (!_.isObject(bookmark)) { %>
				something weird
			<% } else { %>
				<% var url = _.get(bookmark, 'properties.url[0]', '') %>
				<a class="p-name u-url" href="${ onlyHttpUrl(url) }">
					<%- properties.name ? _.head(properties.name) : _.get(bookmark, 'properties.name[0]', url) %>
				</a>
			<% } %>
		</header>
	</div>
<% }) %>

<% if (!isUntitled) { %>
	<div class="entry-core">
		<h1 class="p-name">
			<a href="${ permalink }" class="u-url u-uid" ${ !compactView ? 'rel="bookmark"' : '' } tabindex="-1">
				<%- _.head(properties.name) %>
			</a>
		</h1>
	</div>
<% } %>

<% if (!_.isEmpty(properties.content) || !_.isEmpty(properties['repost-of'])) { %>
	<div class="e-content ${ isUntitled ? 'p-name' : '' }">
		<% if (!isUntitled) { %>
			<fragmention-target exact>
		<% } %>
		<% _.forEach(properties['repost-of'], function (repost) { %>
			<%= templates.showRefContext({ entry: repost, long: true, prop: 'u-repost-of', reason: reasonIcon('repost', 'retweet') + ' reposted', rel: !compactView ? 'rel="repost-of"' : '' }) %>
		<% }) %>
		<% var onlySummary = !isUntitled && compactView %>
		<% if (!_.isEmpty(onlySummary ? properties.summary : properties.content)) { %>
			<div class="entry-core">
				<%= templates.showContent({ properties: properties, long: !compactView, onlySummary: onlySummary }) %>
			</div>
		<% } %>
		<% if (!isUntitled) { %>
			</fragmention-target>
		<% } %>
	</div>
<% } %>

<footer class="entry-footer">
	<div class="entry-meta">
		posted on
		<time class="dt-published" datetime="${ _.head(properties.published) }">
			<a href="${ permalink }" class="u-url u-uid note-permalink" ${ !compactView ? 'rel="bookmark"' : '' }>
				<%- moment.utc(_.head(properties.published)).format(dateFormat) %>
			</a>
		</time>

		<% if (!_.isEmpty(properties['client-id'])) { %>
			using <a href="${ _.head(properties['client-id']) }" class="u-client-id">
				<%- _.trimEnd(_.head(properties['client-id']).replace('http://', '').replace('https://', ''), '/') %>
			</a>
		<% } %>

		<% if (!_.isEmpty(properties.updated) && (_.head(properties.updated) != _.head(properties.published))) { %>
			and updated on
			<time class="dt-updated" datetime="${ _.head(properties.updated) }">
				<%- moment.utc(_.head(properties.updated)).format(dateFormat) %>
			</time>
		<% } %>

		<% if (!_.isEmpty(properties.syndication)) { %>
			/ also on:
			<% _.forEach(properties.syndication, function (repost) { %>
				<a class="u-syndication" ${ !compactView ? 'rel="syndication"' : '' } href="${ repost }"><%- syndicationName(repost) %></a>
			<% }) %>
		<% } %>

		<% if (compactView) { _.forEach(comments, function (reactions, name) { %>
			<%= templates.showCount({ reactions: reactions, name: name, icon: iconNames[name] }) %>
		<% }) } %>
	</div>

	<% if (!compactView) { _.forEach(comments, function (reactions, name) { if (name != 'replies') { %>
		<%= templates.showFacepile({ reactions: reactions, name: name, icon: iconNames[name], prop: props[name] || 'u-comment' }) %>
	<% } }) } %>

	<% if (_.isEmpty(properties['like-of']) && _.isEmpty(properties['bookmark-of'])) { %>
		<div class="entry-actions">
			<%= templates.entryActions({ entry: entry, permalink: permalink }) %>
		</div>
	<% } %>
</footer>

<% if (!compactView && !_.isEmpty(comments.replies)) { %>
	<section class="entry-replies">
		<% _.forEach(comments.replies, function (reply) { %>
			<%= templates.showRefContext({ entry: reply, long: false, prop: 'u-comment', reason: null, rel: '', showReplies: true, showContexts: false }) %>
		<% }) %>
	</section>
<% } %>
